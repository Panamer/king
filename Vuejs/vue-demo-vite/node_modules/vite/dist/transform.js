"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
function createServerTransformPlugin(transforms, customBlockTransforms) {
    return ({ app }) => {
        app.use(async (ctx, next) => {
            await next();
            const { path, query } = ctx;
            let code = null;
            for (const t of transforms) {
                if (t.test(path, query)) {
                    ctx.type = 'js';
                    if (ctx.body) {
                        code = code || (await utils_1.readBody(ctx.body));
                        if (code) {
                            ctx.body = await t.transform(code, utils_1.isImportRequest(ctx), false, path, query);
                            code = ctx.body;
                        }
                    }
                }
            }
            // custom blocks
            if (path.endsWith('vue') && query.type === 'custom') {
                const t = customBlockTransforms[query.blockType];
                if (t) {
                    ctx.type = 'js';
                    if (ctx.body) {
                        code = code || (await utils_1.readBody(ctx.body));
                        if (code) {
                            ctx.body = await t(code, query);
                        }
                    }
                }
            }
        });
    };
}
exports.createServerTransformPlugin = createServerTransformPlugin;
function createBuildJsTransformPlugin(transforms, customBlockTransforms) {
    return {
        name: 'vite:transforms',
        async transform(code, id) {
            const { path, query } = utils_1.parseWithQuery(id);
            let result = code;
            for (const t of transforms) {
                if (t.test(path, query)) {
                    result = await t.transform(result, true, true, path, query);
                }
            }
            // custom blocks
            if (query.vue != null && typeof query.type === 'string') {
                const t = customBlockTransforms[query.type];
                if (t) {
                    // normalize lang since rollup-plugin-vue appends it as .xxx
                    const normalizedQuery = {};
                    for (const key in query) {
                        if (key.startsWith(`lang.`)) {
                            normalizedQuery.lang = key.slice(5);
                        }
                        else {
                            normalizedQuery[key] = query[key];
                        }
                    }
                    result = await t(result, normalizedQuery);
                }
            }
            return result;
        }
    };
}
exports.createBuildJsTransformPlugin = createBuildJsTransformPlugin;
//# sourceMappingURL=transform.js.map